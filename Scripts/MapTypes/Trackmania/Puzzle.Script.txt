#RequireContext CSmMapType
#Const Version			"03-21-2022"
#Const MapTypeVersion	1
#Const ScriptName		"Puzzle.Script.txt"

#Include "Libs/Nadeo/Anchor.Script.txt" as Anchor
#Include "Libs/Nadeo/MapType.Script.txt" as MapType
#Include "Libs/Nadeo/Layers2.Script.txt"	as Layers
#Include "Libs/Nadeo/CMGame/Modes/Legacy/MapType.Script.txt" as TMMapType
#Include "Modes/TrackMania/TM_RaceTest_Local.Script.txt" as RaceTest
#Include "TextLib" as TL
#Include "MathLib" as ML

#Struct K_BlockMemory {
	Text BlockModelName;
	Int3 Position;
	Boolean IsGhostBlock;
	Boolean IsFreeBlock;
	CMapEditorPlugin::CardinalDirections Direction;
}

#Struct K_CopyMemory {
	K_BlockMemory[] Blocks;
	K_BlockMemory[] GhostBlocks;
}

#Struct K_PuzzleMapInfo {
	Integer FreeBlockCount;
	Integer BlockCount;
	K_BlockMemory[Text] Blocks;
	Integer[Text] BlockModelCount;
	CBlockModel[] BlockStock;
	Integer ItemCount;
}

#Struct K_PuzzlePlayInfo {
	K_BlockMemory[] Blocks;
	K_BlockMemory[] GhostBlocks;
	Integer[Text] BlockModelCount;
}

declare CMlFrame[] BlockFrames;
declare K_PuzzleMapInfo PuzzleMapInfo;
declare K_PuzzlePlayInfo PuzzlePlayInfo;
declare Integer LoadedAuthorTime;
declare Boolean CueUndo;

Void ClearSolution(){
	foreach (Block in PuzzlePlayInfo.Blocks){
		RemoveBlock(GetBlockModelFromName(Block.BlockModelName), Block.Position, Block.Direction);
	}
	foreach (Block in PuzzlePlayInfo.GhostBlocks){
		RemoveGhostBlock(GetBlockModelFromName(Block.BlockModelName), Block.Position, Block.Direction);
	}
	CustomSelectionCoords.clear();
	PuzzlePlayInfo.Blocks.clear();
	PuzzlePlayInfo.GhostBlocks.clear();
}

Void SolutionToClipboard(){
	declare K_CopyMemory NewMemory;
	NewMemory.Blocks = PuzzlePlayInfo.Blocks;
	NewMemory.GhostBlocks = PuzzlePlayInfo.GhostBlocks;
	System.ClipboardSet(NewMemory.tojson());
}

Void TextToSolution(Text _SolutionText){
	declare metadata Boolean MapUsesGhostBlocks for Map;
	declare K_CopyMemory NewMemory;
	declare CBlockModel CurrentModel;
	NewMemory.fromjson(_SolutionText);
	log(_SolutionText);
	log(NewMemory);
	PuzzlePlayInfo.BlockModelCount.clear();
	ClearSolution();
	foreach (Block in NewMemory.Blocks){
		CurrentModel = GetBlockModelFromName(Block.BlockModelName);
		if (PuzzleMapInfo.BlockStock.exists(CurrentModel)) {
			if (!PuzzlePlayInfo.BlockModelCount.existskey(CurrentModel.Name)){
				PuzzlePlayInfo.BlockModelCount[CurrentModel.Name] = 0;
			}
			if (PuzzlePlayInfo.BlockModelCount[CurrentModel.Name] < CurrentModel.InterfaceNumber){
				PlaceBlock(CurrentModel, Block.Position, Block.Direction);
				PuzzlePlayInfo.BlockModelCount[CurrentModel.Name] += 1;
			}
		}
	}
	if (MapUsesGhostBlocks) {
		foreach (Block in NewMemory.GhostBlocks){
			CurrentModel = GetBlockModelFromName(Block.BlockModelName);
			if (PuzzleMapInfo.BlockStock.exists(CurrentModel)) {
				if (!PuzzlePlayInfo.BlockModelCount.existskey(CurrentModel.Name)){
					PuzzlePlayInfo.BlockModelCount[CurrentModel.Name] = 0;
				}
				if (PuzzlePlayInfo.BlockModelCount[CurrentModel.Name] < CurrentModel.InterfaceNumber){
					PlaceGhostBlock(CurrentModel, Block.Position, Block.Direction);
					PuzzlePlayInfo.BlockModelCount[CurrentModel.Name] += 1;
				}
			}
		}
	}
}

K_BlockMemory BlockToStruct(CBlock _Block){
	declare K_BlockMemory NewStruct;
	NewStruct.BlockModelName = _Block.BlockModel.Name;
	NewStruct.IsGhostBlock = _Block.IsGhostBlock();
	if (_Block.Coord == <-1, 0, -1>) {
		NewStruct.IsFreeBlock = True;
	}
	switch (_Block.Direction){
		case CBlock::CardinalDirections::North: {
			NewStruct.Direction = CMapEditorPlugin::CardinalDirections::North;
		}
		case CBlock::CardinalDirections::East: {
			NewStruct.Direction = CMapEditorPlugin::CardinalDirections::East;
		}
		case CBlock::CardinalDirections::South: {
			NewStruct.Direction = CMapEditorPlugin::CardinalDirections::South;
		}
		case CBlock::CardinalDirections::West: {
			NewStruct.Direction = CMapEditorPlugin::CardinalDirections::West;
		}
	}
	NewStruct.Position = _Block.Coord;
	return NewStruct;
}

Void PrePuzzleSetup(){
	declare metadata Text[] PuzzleBlockNames for Map;
	declare K_PuzzleMapInfo NewMapInfo;
	declare K_BlockMemory CurBlockMem;
	foreach (Block in Blocks){
		if (Block.BlockModel.Name != "Grass" && !Block.BlockModel.IsClip){
			CurBlockMem = BlockToStruct(Block);
				if (CurBlockMem.IsFreeBlock) {
					NewMapInfo.FreeBlockCount += 1;
				}
				else {
					NewMapInfo.BlockCount += 1;
				}
				NewMapInfo.Blocks[CurBlockMem.tojson()] = CurBlockMem;
				if (!NewMapInfo.BlockModelCount.existskey(Block.BlockModel.Name)){
					NewMapInfo.BlockModelCount[Block.BlockModel.Name] = 1;
				}
				else {
					NewMapInfo.BlockModelCount[Block.BlockModel.Name] += 1;
				}
			
		}
	}
	foreach (BlockModel in BlockModels) {
		if (PuzzleBlockNames.exists(BlockModel.Name) && !NewMapInfo.BlockStock.exists(BlockModel)) {
			NewMapInfo.BlockStock.add(BlockModel);
		}
	}
	NewMapInfo.ItemCount = Items.count;
	PuzzleMapInfo = NewMapInfo;
}

Void PlaceBlockMemory(){
	// Check if map is final
	if (Map.MapInfo.MapUid == ""){
		return;
	}
	declare persistent Text[Text] PuzzleBlockMemV2 for UserMgr.MainUser;
	// Make new Key
	if (!PuzzleBlockMemV2.existskey(Map.MapInfo.MapUid)){
		PuzzleBlockMemV2[Map.MapInfo.MapUid] = "{}";
		return;
	}
	// Check if Json
	else if (!TL::StartsWith("{", PuzzleBlockMemV2[Map.MapInfo.MapUid])){
		return;
	}
	// Check if Empty
	if (PuzzleBlockMemV2[Map.MapInfo.MapUid] == "{}" || PuzzleBlockMemV2[Map.MapInfo.MapUid] == "{\"Blocks\":[],\"GhostBlocks\":[]}"){
		return;
	}
	TextToSolution(PuzzleBlockMemV2[Map.MapInfo.MapUid]);
}

Void SaveBlockMemory(){
	declare K_CopyMemory NewMemory;
	// Check if map is final
	if (Map.MapInfo.MapUid == ""){
		return;
	}
	declare persistent Text[Text] PuzzleBlockMemV2 for UserMgr.MainUser;
	// Make new Key
	if (!PuzzleBlockMemV2.existskey(Map.MapInfo.MapUid)){
		PuzzleBlockMemV2[Map.MapInfo.MapUid] = "{}";
	}
	// Fill Block Memory
	NewMemory.Blocks = PuzzlePlayInfo.Blocks;
	NewMemory.GhostBlocks = PuzzlePlayInfo.GhostBlocks;
	declare Text TextMem = NewMemory.tojson();
	// Check if empty
	if (TextMem != "{\"Blocks\":[],\"GhostBlocks\":[]}") {
		PuzzleBlockMemV2[Map.MapInfo.MapUid] = NewMemory.tojson();
	}
	UserMgr.MainUser.PersistentSave();
}

Void UpdateMapTimes() {
	declare persistent Integer RememberedTime for Map;
	Map.TMObjective_AuthorTime = RememberedTime;
	Map.ObjectiveTextAuthor = TL::TimeToText(Map.TMObjective_AuthorTime, True);
	Map.ObjectiveTextGold 	= TL::TimeToText(Map.TMObjective_GoldTime, True);
	Map.ObjectiveTextSilver = TL::TimeToText(Map.TMObjective_SilverTime, True);
	Map.ObjectiveTextBronze = TL::TimeToText(Map.TMObjective_BronzeTime, True);
}

Boolean StructExists(K_BlockMemory[Text] _StructArray, K_BlockMemory _Existor){
	if (_StructArray.existskey(_Existor.tojson())){
		return True;
	}
	return False;
}

Boolean MandValidMapCheck(){
	declare metadata Boolean MapUsesFreeBlocks for Map;
	declare metadata Boolean MapUsesGhostBlocks for Map;
	declare persistent Integer RememberedTime for Map;
	declare Integer PuzzleBlocksFound;
	declare Integer FreePuzzleBlocksFound;
	PuzzlePlayInfo.BlockModelCount.clear();
	PuzzlePlayInfo.Blocks.clear();
	PuzzlePlayInfo.GhostBlocks.clear();
	CueUndo = False;
	if (Items.count != PuzzleMapInfo.ItemCount) {
		CueUndo = True;
	}
	Map.TMObjective_AuthorTime = RememberedTime;
	UpdateMapTimes();
	CustomSelectionCoords.clear();
	declare K_BlockMemory CurrentStruct;
	foreach (Block in GhostBlocks) {
		if (Block != Null) {
			if (Block.BlockModel.Name != "Grass" && !Block.BlockModel.IsClip) {
				CurrentStruct = BlockToStruct(Block);
				if (!StructExists(PuzzleMapInfo.Blocks, CurrentStruct)){
					if (!TL::Find("Pillar", Block.BlockModel.Name, False, False)) {
						if (!PuzzleMapInfo.BlockStock.exists(Block.BlockModel)){
							CueUndo = True;
						}
						if (!PuzzlePlayInfo.BlockModelCount.existskey(Block.BlockModel.Name)){
							PuzzlePlayInfo.BlockModelCount[Block.BlockModel.Name] = 1;
						}
						else {
							PuzzlePlayInfo.BlockModelCount[Block.BlockModel.Name] += 1;
							if (PuzzlePlayInfo.BlockModelCount[Block.BlockModel.Name] > Block.BlockModel.InterfaceNumber){
								CueUndo = True;
							}
						}
					}
					if (Block.Coord == <-1, 0, -1>) {
						if (!MapUsesFreeBlocks) {
							CueUndo = True;
						}
					}
					if (Block.IsGhostBlock()) {
						if (!MapUsesGhostBlocks){
							CueUndo = True;
						}
						else {
							PuzzlePlayInfo.GhostBlocks.add(CurrentStruct);
						}
					}
					else {
						PuzzlePlayInfo.Blocks.add(CurrentStruct);
					}
					foreach (unit in Block.BlockUnits) {
						CustomSelectionCoords.add(Block.Coord + unit.Offset);
					}
				}
				else {
					PuzzleBlocksFound += 1;
				}
			}
		}
	}
	//Lazy copy paste ;-;
	foreach (Block in ClassicBlocks) {
		if (Block != Null) {
			if (Block.BlockModel.Name != "Grass" && !Block.BlockModel.IsClip) {
				CurrentStruct = BlockToStruct(Block);
				if (!StructExists(PuzzleMapInfo.Blocks, CurrentStruct)){
					if (!TL::Find("Pillar", Block.BlockModel.Name, False, False)) {
						if (!PuzzleMapInfo.BlockStock.exists(Block.BlockModel)){
							CueUndo = True;
						}
						if (!PuzzlePlayInfo.BlockModelCount.existskey(Block.BlockModel.Name)){
							PuzzlePlayInfo.BlockModelCount[Block.BlockModel.Name] = 1;
						}
						else {
							PuzzlePlayInfo.BlockModelCount[Block.BlockModel.Name] += 1;
							if (PuzzlePlayInfo.BlockModelCount[Block.BlockModel.Name] > Block.BlockModel.InterfaceNumber){
								CueUndo = True;
							}
						}
					}
					if (Block.Coord == <-1, 0, -1>) {
						if (!MapUsesFreeBlocks) {
							CueUndo = True;
						}
					}
					if (Block.IsGhostBlock()) {
						if (!MapUsesGhostBlocks){
							CueUndo = True;
						}
						else {
							PuzzlePlayInfo.GhostBlocks.add(CurrentStruct);
						}
					}
					else {
						PuzzlePlayInfo.Blocks.add(CurrentStruct);
					}
					foreach (unit in Block.BlockUnits) {
						CustomSelectionCoords.add(Block.Coord + unit.Offset);
					}
				}
				else {
					if (CurrentStruct.IsFreeBlock) {
						FreePuzzleBlocksFound +=1;
					}
					else {
						PuzzleBlocksFound += 1;
					}
				}
			}
		}
	}
	if (PuzzleBlocksFound != PuzzleMapInfo.BlockCount || FreePuzzleBlocksFound != PuzzleMapInfo.FreeBlockCount){
		CueUndo = True;
	}
	SaveBlockMemory();
	return !CueUndo;
}

Void MandatoryMapCheck(){
	declare metadata Boolean MapUsesFreeBlocks for Map;
	declare metadata Boolean MapUsesGhostBlocks for Map;
	if (PlaceMode != CMapEditorPlugin::PlaceMode::Block) {
		switch (PlaceMode) {
			case CMapEditorPlugin::PlaceMode::Test: {
			}
			case CMapEditorPlugin::PlaceMode::FreeBlock: {
				if (!MapUsesFreeBlocks) {
					PlaceMode = CMapEditorPlugin::PlaceMode::Block;
				}
			}
			case CMapEditorPlugin::PlaceMode::GhostBlock: {
				if (!MapUsesGhostBlocks) {
					PlaceMode = CMapEditorPlugin::PlaceMode::Block;
				}
			}
			default: {
				PlaceMode = CMapEditorPlugin::PlaceMode::Block;
			}
		}
	}
	if (!PuzzleMapInfo.BlockStock.exists(CursorBlockModel)) {
		if (CursorBlockModel != Null) {
			CursorBlockModel = PuzzleMapInfo.BlockStock[0];
		}
	}
}

Integer GetCountOfABlock(Text _BlockName) {
	declare Int3[] PreBlockCoords for Map;
	declare Integer NumberOfBlocks;
	foreach (Block in Blocks) {
		if (Block != Null) {
			if (!PreBlockCoords.exists(Block.Coord) && Block.BlockModel.Name == _BlockName) {
				NumberOfBlocks += 1;
			}
		}
	}
	return NumberOfBlocks;
}

Void FillBlockInv(Integer _Page){
	for (i, 0, BlockFrames.count - 1) {
		if ((8 * _Page) + i < PuzzleMapInfo.BlockStock.count) {
			foreach (Control in BlockFrames[i].Controls) {
				if (TL::Find("Icon", Control.ControlId, False, False)) {
					declare CMlQuad BlockIcon <=> (Control as CMlQuad);
					BlockIcon.Image = PuzzleMapInfo.BlockStock[(8 * _Page) + i].Icon;
				}
				else if (TL::Find("BlockCount", Control.ControlId, False, False)) {
					declare CMlLabel BlockCount <=> (Control as CMlLabel);
					BlockCount.Value = GetCountOfABlock(PuzzleMapInfo.BlockStock[(8 * _Page) + i].Name) ^ "/" ^ PuzzleMapInfo.BlockStock[(8 * _Page) + i].InterfaceNumber;
				}
			}
			BlockFrames[i].Show();
		}
		else {
			BlockFrames[i].Hide();
		}
	}
}

Void UpdateValidability() {
	declare StartsFinishes = 0;
	declare Starts = 0;
	declare Finishes = 0;
	declare Checkpoints = 0;
	foreach (Anchor in AnchorData) {
		if (Anchor.Block != Null)
		{
			switch (Anchor.Block.BlockModel.WaypointType) {
				case CBlockModel::EWayPointType::StartFinish: StartsFinishes += 1;
				case CBlockModel::EWayPointType::Start: Starts += 1;
				case CBlockModel::EWayPointType::Finish: Finishes += 1;
				case CBlockModel::EWayPointType::Checkpoint: Checkpoints += 1;
			}
		}
		else
		{
			if (Anchor.DefaultTag == "Spawn") {
				Starts += 1;
			}
			else if (Anchor.DefaultTag == "Goal")
			{
				Finishes += 1;
			}
			else if (Anchor.DefaultTag == "Checkpoint")
			{
				Checkpoints += 1;
			}
			else if (Anchor.DefaultTag == "StartFinish")
			{
				StartsFinishes += 1;
			}

		}
	}
	
	// It's a multilap
	if (StartsFinishes > 0) {
		// No start line block, so there must be exactly one multilap block, so that we know where the car will spawn.
		if (Starts == 0 && StartsFinishes > 1) {
			ValidationStatus = CMapType::ValidationStatus::NotValidable;
			//L16N [MapEditor] Message explaining to the player that a track can contain only one start line block.
			ValidabilityRequirementsMessage = _("You can place only one starting point!");
			return;
		}
		// A start line block may be present: in that case the car will spawn on it, and not on the multilap block.
		// But there must be only one start line block (and there could be more than one multilap block).
		if (Starts > 1) {
			ValidationStatus = CMapType::ValidationStatus::NotValidable;
			//L16N [MapEditor] Message explaining to the player that a track can contain only one start line block.
			ValidabilityRequirementsMessage = _("You can place only one starting point!");
			return;
		}
		// Has at least one checkpoint
		if (Checkpoints < 1) {
			ValidationStatus = CMapType::ValidationStatus::NotValidable;
			//L16N [MapEditor] Message explaining to the player that a track has to contain at least one checkpoint block.
			ValidabilityRequirementsMessage = _("You must place at least one checkpoint!");
			return;
		}
	} 
	// It's a simple race
	else {
		// Exactly one start
		if (Starts != 1) {
			ValidationStatus = CMapType::ValidationStatus::NotValidable;
			//L16N [MapEditor] Message explaining to the player that a track has to contain exactly one start line block.
			ValidabilityRequirementsMessage = _("You need to place a starting point!");
			return;
		}
		// At least one finish
		if (Finishes < 1) {
			ValidationStatus = CMapType::ValidationStatus::NotValidable;
			//L16N [MapEditor] Message explaining to the player that a track has to contain exactly one finish line block.
			ValidabilityRequirementsMessage = _("You must place at least one finish line!");
			return;
		}
	}

	//Shadows should be computed
	/*
	if (CurrentShadowsQuality == CMapType::ShadowsQuality::NotComputed || CurrentShadowsQuality == CMapType::ShadowsQuality::VeryFast || CurrentShadowsQuality == CMapType::ShadowsQuality::Fast) {
		ValidabilityRequirementsMessage = _("You must compute shadows!");
		return;
	}
	*/
	
	// If the objectives times are not valid, the author must revalidate his map
	if (!MapType::ObjectivesAreValid()) {
		ValidationStatus = CMapType::ValidationStatus::Validable;
		return;
	}
	
	// Allow to start the validation
	if (ValidationStatus == CMapType::ValidationStatus::NotValidable) {
		ValidationStatus = CMapType::ValidationStatus::Validable;
	}
}

Text PuzzlePlayUI() {
	declare metadata Boolean MapUsesFreeBlocks for Map;
	declare metadata Boolean MapUsesGhostBlocks for Map;
	return """
	<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
	<manialink version="3">	
	<frame id="Frame_PuzzlePlayUI">
	<frame id="Frame_PuzzleExtras" pos="-53">
		<label pos="-135 72" z-index="0" size="20 10" text="Extras" halign="center" valign="center" textemboss="1" textfont="GameFontBlack" autonewline="1" textsize="4"/>
		<quad pos="-107 65" z-index="0" size="10 10" bgcolor="FFFA" id="Button_ToggleExtra" style="UICommon64_1" substyle="Next_light" scriptevents="1"/>
		<label pos="-160 65" z-index="0" size="20 5" text="Toggle Block Helpers" style="CardButtonMediumL" scriptevents="1" id="Button_HideClips"/>
		<label pos="-160 55" z-index="0" size="20 5" text="Copy Solution to Clipboard" style="CardButtonMediumL" scriptevents="1" id="Button_CopySolution"/>
		<label pos="-160 45" z-index="0" size="20 5" text="Paste Solition from Entry" style="CardButtonMediumL" scriptevents="1" id="Button_SendSolution"/>
		<textedit pos="-160 31.5" z-index="0" size="45 7" default="Solution Entry" halign="left" valign="center" id="Entry_Solution"/>
		<label pos="-135 27.5" z-index="0" size="50 15" text="Using solution changing tools may lead to the loss of your solution! Make sure to keep text backups via the copy solution button!" halign="center" valign="top" textemboss="1" textfont="GameFontSemiBold" textcolor="FAA" autonewline="1" textsize="2"/>
		<quad pos="-165 70" z-index="-1" size="70 70" halign="left" style="UICommon128_1" substyle="BgToolTilted" valign="top" opacity="0.5" colorize="000"/>
		<quad pos="-95 35" z-index="-1" size="16 70" halign="right" style="UICommon128_1" substyle="BgToolTilted" opacity="0.25" colorize="000" valign="center"/>
		<quad pos="-170 72" z-index="-1" size="60 10" style="UICommon128_1" substyle="BgToolTilted" opacity="0.5" colorize="000" valign="center" halign="left"/>
	</frame>
	<frame id="Frame_PlacementSelection" hidden="1">
		<quad pos="-140 -54" z-index="1" size="10 10" bgcolor="FFFA" halign="center" valign="center" style="UICommon64_1" substyle="BlockEditor_dark" scriptevents="1" id="Button_PlaceMode"/>
		<quad pos="-130 -54" z-index="1" size="10 10" bgcolor="FFFA" halign="center" valign="center" style="UICommon64_1" substyle="GhostBlocks_dark" scriptevents="1" id="Button_GhostMode"/>
		<quad pos="-120 -54" z-index="1" size="10 10" bgcolor="FFFA" halign="center" valign="center" style="UICommon64_1" substyle="FreeBlocks_dark" scriptevents="1" id="Button_FreeMode"/>
		<quad pos="-130 -54" z-index="0" size="40 10" bgcolor="FFFA" halign="center" valign="center" style="UICommon128_1" substyle="BgToolTilted" colorize="FF2" opacity="0.5"/>
	</frame>
	<frame id="Frame_Block1">
		<label pos="-91 -80" z-index="2" size="20 5" text="1/1" halign="right" valign="center" textemboss="1" id="Label_BlockCount1"/>
		<quad pos="-100 -75" z-index="1" size="20 20" bgcolor="FFFFFF00" halign="center" valign="center" id="Block1Icon" scriptevents="1"/>
		<quad pos="-100 -75" z-index="0" size="25 25" bgcolor="FFFA" halign="center" valign="center" style="UICommon128_1" substyle="Item"/>
	</frame>
	<frame id="Frame_Block2">
		<label pos="-65 -80" z-index="2" size="20 5" text="1/1" valign="center" textemboss="1" halign="right" id="Label_BlockCount2"/>
		<quad pos="-75 -75" z-index="1" size="20 20" bgcolor="FFFFFF00" valign="center" id="Block2Icon" scriptevents="1" halign="center"/>
		<quad pos="-75 -75" z-index="0" size="25 25" bgcolor="FFFA" halign="center" valign="center" style="UICommon128_1" substyle="Item"/>
	</frame>
	<frame id="Frame_Block3">
		<label pos="-40 -80" z-index="2" size="20 5" text="1/1" valign="center" textemboss="1" halign="right" id="Label_BlockCount3"/>
		<quad pos="-50 -75" z-index="1" size="20 20" bgcolor="FFFFFF00" halign="center" valign="center" id="Block3Icon" scriptevents="1"/>
		<quad pos="-50 -75" z-index="0" size="25 25" bgcolor="FFFA" halign="center" valign="center" style="UICommon128_1" substyle="Item"/>
	</frame>
	<frame id="Frame_Block4">
		<label pos="-15 -80" z-index="2" size="20 5" text="1/1" valign="center" textemboss="1" halign="right" id="Label_BlockCount4"/>
		<quad pos="-25 -75" z-index="1" size="20 20" bgcolor="FFFFFF00" halign="center" valign="center" id="Block4Icon" scriptevents="1"/>
		<quad pos="-25 -75" z-index="0" size="25 25" bgcolor="FFFA" halign="center" valign="center" style="UICommon128_1" substyle="Item"/>
	</frame>
	<frame id="Frame_Block5">
		<label pos="10 -80" z-index="2" size="20 5" text="1/1" valign="center" textemboss="1" halign="right" id="Label_BlockCount5"/>
		<quad pos="0 -75" z-index="1" size="20 20" bgcolor="FFFFFF00" halign="center" valign="center" id="Block5Icon" scriptevents="1"/>
		<quad pos="0 -75" z-index="0" size="25 25" bgcolor="FFFA" halign="center" valign="center" style="UICommon128_1" substyle="Item"/>
	</frame>
	<frame id="Frame_Block6">
		<label pos="35 -80" z-index="2" size="20 5" text="1/1" valign="center" textemboss="1" halign="right" id="Label_BlockCount6"/>
		<quad pos="25 -75" z-index="1" size="20 20" bgcolor="FFFFFF00" halign="center" valign="center" id="Block6Icon" scriptevents="1"/>
		<quad pos="25 -75" z-index="0" size="25 25" bgcolor="FFFA" halign="center" valign="center" style="UICommon128_1" substyle="Item"/>
	</frame>
	<frame id="Frame_Block7">
		<label pos="60 -80" z-index="2" size="20 5" text="1/1" valign="center" textemboss="1" halign="right" id="Label_BlockCount7"/>
		<quad pos="50 -75" z-index="1" size="20 20" bgcolor="FFFFFF00" halign="center" valign="center" id="Block7Icon" scriptevents="1"/>
		<quad pos="50 -75" z-index="0" size="25 25" bgcolor="FFFA" halign="center" valign="center" style="UICommon128_1" substyle="Item"/>
	</frame>
	<frame id="Frame_Block8">
		<label pos="85 -80" z-index="2" size="20 5" text="1/1" valign="center" textemboss="1" halign="right" id="Label_BlockCount8"/>
		<quad pos="75 -75" z-index="1" size="20 20" bgcolor="FFFFFF00" halign="center" valign="center" id="Block8Icon" scriptevents="1"/>
		<quad pos="75 -75" z-index="0" size="25 25" bgcolor="FFFA" halign="center" valign="center" style="UICommon128_1" substyle="Item"/>
	</frame>
	<quad pos="-160 -65" z-index="1" size="20 20" bgcolor="FFFA" id="Button_Quit" style="UICommon64_1" substyle="Prev_light" scriptevents="1"/>
	<quad pos="115 -65" z-index="1" size="20 20" bgcolor="FFFA" id="Button_TestMode" style="UICommon64_1" substyle="SteeringWheel_light" scriptevents="1"/>
	<label pos="-136 -74" z-index="5" size="15 10" text="1" halign="center" valign="center" id="Label_PageNumber" textfont="GameFontExtraBold" textsize="5" textcolor="000"/>
	<quad pos="-125 -67.5" z-index="3" size="15 15" bgcolor="FFFA" id="Button_PageRight" style="UICommon64_1" substyle="ArrowUpSquare_dark" scriptevents="1" halign="center" valign="center" rot="90"/>
	<quad pos="-125 -82.5" z-index="3" size="15 15" bgcolor="FFFA" id="Button_PageLeft" style="UICommon64_1" substyle="ArrowUpSquare_dark" scriptevents="1" halign="center" valign="center" rot="-90"/>
	<quad pos="-125 -67.5" z-index="2" size="15 15" bgcolor="FFFA" style="UICommon64_1" substyle="ArrowUpSquare_dark" halign="center" valign="center" rot="90" opacity="0.1"/>
	<quad pos="-125 -82.5" z-index="2" size="15 15" bgcolor="FFFA" style="UICommon64_1" substyle="ArrowUpSquare_dark" halign="center" valign="center" rot="-90" opacity="0.1"/>
	<quad pos="-118 -75" z-index="1" size="25 27" bgcolor="FFF" opacity="0.7" style="UICommon128_1" substyle="BgFrame1" halign="right" valign="center"/>
	<quad pos="102 -67.5" z-index="2" size="15 15" bgcolor="FFFA" id="Button_Camera" style="UICommon64_1" substyle="Camera_dark" scriptevents="1" halign="center" valign="center"/>
	<quad pos="102 -82.5" z-index="2" size="15 15" bgcolor="FFFA" id="Button_Eraser" style="UICommon64_1" substyle="Eraser_dark" scriptevents="1" halign="center" valign="center"/>
	<quad pos="102 -75" z-index="1" size="15 27" bgcolor="FFF" opacity="0.7" style="UICommon128_1" substyle="BgFrame1" halign="center" valign="center"/>
	<quad pos="140 -65" z-index="2" size="20 20" bgcolor="FFFA" id="Button_Validate" style="UICommon64_1" substyle="ValidationFlagGreen" scriptevents="1"/>
	<quad pos="-12 -75" size="205 28" bgcolor="000" halign="center" scriptevents="1" style="UICommon128_1" substyle="BgFrame1" z-index="-1" valign="center" colorize="000" opacity="0.2"/>
	<quad pos="0 -91" size="380 32" bgcolor="000" halign="center" valign="bottom" scriptevents="1" style="UICommon128_1" substyle="BgDialog" z-index="-2"/>
	</frame>
	<script><!--

		#Include "TextLib" as TL

		main () {
			declare Text BlockText for Page;
			declare Integer InvPage for Page;
			declare Integer MaxPages for Page;
			declare Boolean CanFreeBlock = {{{MapUsesFreeBlocks}}};
			declare Boolean CanGhostBlock = {{{MapUsesGhostBlocks}}};
			declare CMlFrame Frame_PlacementSelection = Page.GetFirstChild("Frame_PlacementSelection") as CMlFrame;
			declare CMlFrame Frame_PuzzleExtras = Page.GetFirstChild("Frame_PuzzleExtras") as CMlFrame;
			declare CMlQuad Button_PlaceMode = Page.GetFirstChild("Button_PlaceMode") as CMlQuad;
			declare CMlQuad Button_GhostMode = Page.GetFirstChild("Button_GhostMode") as CMlQuad;
			declare CMlQuad Button_FreeMode = Page.GetFirstChild("Button_FreeMode") as CMlQuad;
			declare CMlQuad Button_HideClips = Page.GetFirstChild("Button_HideClips") as CMlQuad;
			declare CMlQuad Button_ToggleExtra = Page.GetFirstChild("Button_ToggleExtra") as CMlQuad;
			declare CMlTextEdit Entry_Solution = Page.GetFirstChild("Entry_Solution") as CMlTextEdit;
			declare CMlQuad Button_PageRight = Page.GetFirstChild("Button_PageRight") as CMlQuad;
			declare CMlQuad Button_PageLeft = Page.GetFirstChild("Button_PageLeft") as CMlQuad;
			declare CMlLabel Label_PageNumber = Page.GetFirstChild("Label_PageNumber") as CMlLabel;
			Label_PageNumber.Value = "1";
			if (CanFreeBlock || CanGhostBlock) {
				Frame_PlacementSelection.Show();
				if (CanFreeBlock) {
					Button_FreeMode.Show();
				}
				else {
					Button_FreeMode.Hide();
				}
				if (CanGhostBlock) {
					Button_GhostMode.Show();
				}
				else {
					Button_GhostMode.Hide();
				}
			}
			else {
				Frame_PlacementSelection.Hide();
			}
			while(True) {
				yield;
				if (InvPage == 0){
					Button_PageLeft.Hide();
				}
				else {
					Button_PageLeft.Show();
				}
				if (InvPage == MaxPages){
					Button_PageRight.Hide();
				}
				else {
					Button_PageRight.Show();
				}
				switch (Editor.PlaceMode) {
					case CMapEditorPlugin::PlaceMode::FreeBlock: {
						Button_PlaceMode.StyleSelected = False;
						Button_GhostMode.StyleSelected = False;
						Button_FreeMode.StyleSelected = True;
					}
					case CMapEditorPlugin::PlaceMode::GhostBlock: {
						Button_PlaceMode.StyleSelected = False;
						Button_GhostMode.StyleSelected = True;
						Button_FreeMode.StyleSelected = False;
					}
					case CMapEditorPlugin::PlaceMode::Block: {
						Button_PlaceMode.StyleSelected = True;
						Button_GhostMode.StyleSelected = False;
						Button_FreeMode.StyleSelected = False;
					}
				}
				foreach(Event in PendingEvents) {
					if(Event.Type == CGameManialinkScriptEvent::Type::MouseClick)	{	
						switch (Event.ControlId) {
							case "Button_ToggleExtra": {
								if (Frame_PuzzleExtras.RelativePosition_V3.X == 0.0){
									Frame_PuzzleExtras.RelativePosition_V3.X = -53.0;
									Button_ToggleExtra.Substyle = "Next_light";
								}
								else {
									Frame_PuzzleExtras.RelativePosition_V3.X = 0.0;
									Button_ToggleExtra.Substyle = "Prev_light";
								}
							}
							case "Button_PageRight": {
								if (InvPage < MaxPages){
									InvPage += 1;
									Label_PageNumber.Value = (InvPage + 1) ^ "";
									SendCustomEvent("UpdateInv", [""]);
								}
							}
							case "Button_PageLeft": {
								if (InvPage > 0){
									InvPage -= 1;
									Label_PageNumber.Value = (InvPage + 1) ^ "";
									SendCustomEvent("UpdateInv", [""]);
								}
							}
							case "Button_CopySolution": {
								SendCustomEvent("SaveSolutionEvent", [""]);
							}
							case "Button_SendSolution": {
								BlockText = Entry_Solution.Value;
								SendCustomEvent("SetSolutionEvent", [""]);
								Entry_Solution.Value = "";
							}
							case "Button_PlaceMode": {
								SendCustomEvent("PlacementEvent", ["0"]);
							}
							case "Button_FreeMode": {
								SendCustomEvent("PlacementEvent", ["1"]);
							}
							case "Button_GhostMode": {
								SendCustomEvent("PlacementEvent", ["2"]);
							}
							case "Button_HideClips": {
								SendCustomEvent("ToggleClips", [""]);
							}
							case "Button_TestMode": {
								SendCustomEvent("TestModeEvent", [""]);
							}
							case "Button_Camera": {
								SendCustomEvent("CameraEvent", [""]);
							}
							case "Button_Eraser": {
								SendCustomEvent("EraseEvent", [""]);
							}
							case "Button_Validate": {
								SendCustomEvent("ValidateModeEvent", [""]);
							}
							case "Button_Quit": {
								SendCustomEvent("QuitPuzzleEvent", [""]);
							}
						}
						if (TL::EndsWith("Icon", Event.ControlId)){
							SendCustomEvent("SelectPuzzleBlock", [(TL::ToInteger(TL::Join("", TL::RegexFind("1|2|3|4|5|6|7|8|9", Event.ControlId, "g"))) - 1) ^ ""]);
						}
					}
				}
			}
		}
	--></script>
	</manialink>
	""";
}

Void StartPuzzlePlay(Boolean _IsValidation) {
	PrePuzzleSetup();
	HideEditorInterface = True;
	declare Boolean IsPlayingEdit;
	CueUndo = False;
	LoadedAuthorTime = Map.TMObjective_AuthorTime;
	IsPlayingEdit = True;
	CursorBlockModel = PuzzleMapInfo.BlockStock[0];
	ManialinkText = PuzzlePlayUI();
	declare Text BlockText for ManialinkPage;
	declare Integer InvPage for ManialinkPage;
	declare Integer MaxPages for ManialinkPage;
	InvPage = 0;
	HideOtherPlugins();
	yield;
	MaxPages = PuzzleMapInfo.BlockStock.count / 8;
	//Fill Block Inventory
	BlockFrames.clear();
	foreach (Control in (ManialinkPage.GetFirstChild("Frame_PuzzlePlayUI") as CMlFrame).Controls) {
		if (TL::Find("Frame_Block", Control.ControlId, False, False)) {
			BlockFrames.add((Control as CMlFrame));
		}
	}
	FillBlockInv(InvPage);
	BlockStockMode = False;
	EditMode = CMapEditorPlugin::EditMode::Place;
	PlaceMode = CMapEditorPlugin::PlaceMode::Block;
	//Place MemoryBlocks.
	PlaceBlockMemory();
	while (IsPlayingEdit) {
		yield;
		MandatoryMapCheck();
		if (ValidationStatus != CMapType::ValidationStatus::Validated || ValidationStatus != CMapType::ValidationStatus::Validable) {
			ValidationStatus = CMapType::ValidationStatus::Validable;
		}
		foreach (Event in PendingEvents) {
			switch(Event.Type) {
				case CMapEditorPluginEvent::Type::MapModified: {
					MandValidMapCheck();
					if (CueUndo){
						Undo();
						CueUndo = False;
					}
					for (i, 0, 7) {
						foreach (Control in BlockFrames[i].Controls) {
							if	(PuzzleMapInfo.BlockStock.existskey((8 * InvPage) + i)){
								if (TL::Find("BlockCount", Control.ControlId, False, False)) {
									declare CMlLabel BlockCount <=> (Control as CMlLabel);
									if (PuzzlePlayInfo.BlockModelCount.existskey(PuzzleMapInfo.BlockStock[(8 * InvPage) + i].Name)){
										BlockCount.Value = PuzzlePlayInfo.BlockModelCount[PuzzleMapInfo.BlockStock[(8 * InvPage) + i].Name] ^ "/" ^ PuzzleMapInfo.BlockStock[(8 * InvPage) + i].InterfaceNumber;
									}
									else {
										BlockCount.Value = "0/" ^ PuzzleMapInfo.BlockStock[(8 * InvPage) + i].InterfaceNumber;
									}
									
								}
							}
						}
					}
				}
				case CMapEditorPluginEvent::Type::StartTest: {
					Mode.UIManager.UIAll.OverlayHide321Go = True;
					Mode.UIManager.UIAll.OverlayHideCountdown = True;
				}
				case CMapEditorPluginEvent::Type::LayerCustomEvent: {
					switch (Event.CustomEventType) {
						case "SelectPuzzleBlock": {
							EditMode = CMapEditorPlugin::EditMode::Place;
							if (PlaceMode == CMapEditorPlugin::PlaceMode::Test) {
								PlaceMode = CMapEditorPlugin::PlaceMode::Block;
							}
							CursorBlockModel = PuzzleMapInfo.BlockStock[(8 * InvPage) + TL::ToInteger(Event.CustomEventData[0])];
						}
						case "PlacementEvent": {
							switch (Event.CustomEventData[0]) {
								case "0": {
									PlaceMode = CMapEditorPlugin::PlaceMode::Block;
								}
								case "1": {
									PlaceMode = CMapEditorPlugin::PlaceMode::FreeBlock;
								}
								case "2": {
									PlaceMode = CMapEditorPlugin::PlaceMode::GhostBlock;
								}
							}
						}
						case "TestModeEvent": {
							PlaceMode = CMapEditorPlugin::PlaceMode::Test;
						}
						case "ToggleClips": {
							HideBlockHelpers = !HideBlockHelpers;
						}
						case "EraseEvent": {
							EditMode = CMapEditorPlugin::EditMode::Erase;
						}
						case "CameraEvent": {
							EditMode = CMapEditorPlugin::EditMode::FreeLook;
						}
						case "SaveSolutionEvent": {
							SolutionToClipboard();
						}
						case "UpdateInv": {
							FillBlockInv(InvPage);
						}
						case "SetSolutionEvent": {
							if (BlockText == ""){
								ClearSolution();
							}
							else if (BlockText != "Solution Entry"){
								TextToSolution(BlockText);
								MandValidMapCheck();
								if (CueUndo){
									Undo();
									CueUndo = False;
								}
							}
						}
						case "ValidateModeEvent": {
							declare Integer BoolToInt;
							if (MandValidMapCheck()){
								if (_IsValidation) {
									BoolToInt = 1;
								}
								else {
									BoolToInt = 0;
								}
								TestMapWithMode("Modes/Trackmania/Puzzle/PuzzleSolo.Script.txt", "<root><setting name=\"S_IsValidation\" value=\""^ BoolToInt ^ "\" type=\"boolean\"/></root>");
							}
							else {
								Undo();
							}
						}
						case "QuitPuzzleEvent": {
							IsPlayingEdit = False;
						}
						default: {}
					}
				}
			}
		}
		
	}
	//remove Blocks and Ghost Blocks
	ClearSolution();
	if (!_IsValidation) {
		Quit();
	}
	else {
		CustomSelectionCoords.clear();
		UpdateMapTimes();
		ManialinkText = "";
		HideEditorInterface = False;
		ShowOtherPlugins();
	}
	
}

Void CustomObjectivesMenu() {
HideEditorInterface = True;
HideOtherPlugins();
declare metadata Boolean IsLocked for Map;
declare metadata Boolean MapUsesFreeBlocks for Map;
declare metadata Boolean MapUsesGhostBlocks for Map;
declare Boolean IsLockedTemp;
declare Boolean MapUsesFreeBlocksTemp;
declare Boolean MapUsesGhostBlocksTemp;
IsLockedTemp = IsLocked;
MapUsesFreeBlocksTemp = MapUsesFreeBlocks;
MapUsesGhostBlocksTemp = MapUsesGhostBlocks;
declare Integer TempGoldScore;
declare Integer TempSilverScore;
declare Integer TempBronzeScore;
declare Integer TempTimeLimit;
ManialinkText = 
"""
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<manialink version="3">
<label pos="20 17" z-index="1" size="45 7" text="Experimental Features" halign="center" valign="center" textsize="2" textfont="GameFontExtraBold" textemboss="1"/>
<label pos="20 -8" z-index="1" size="40 5" text="Author Lock" halign="center" valign="center" textcolor="FFF" textfont="GameFontExtraBold" textemboss="1"/>
<quad pos="-40 17" z-index="1" size="10 10" bgcolor="FFFA" style="MedalsBig" substyle="MedalNadeo" halign="center" valign="center"/>
<quad pos="-40 6" z-index="1" size="10 10" bgcolor="FFFA" style="MedalsBig" substyle="MedalGold" halign="center" valign="center"/>
<quad pos="-40 -5" z-index="1" size="10 10" bgcolor="FFFA" style="MedalsBig" substyle="MedalSilver" halign="center" valign="center"/>
<quad pos="-40 -16" z-index="1" size="10 10" bgcolor="FFFA" style="MedalsBig" substyle="MedalBronze" halign="center" valign="center"/>
<label id="AuthorScore" pos="-20 17" z-index="1" size="29 5" text="{{{Map.TMObjective_AuthorTime}}}" style="Manialink_Body" halign="center" valign="center" selecttext="1" textcolor="D9D9D9FF"/>
<entry id="CustomGoldScore" pos="-20 6" z-index="1" size="29 5" default="{{{Map.TMObjective_GoldTime}}}" style="Manialink_Body" halign="center" valign="center" selecttext="1"/>
<entry id="CustomSilverScore" pos="-20 -5" z-index="1" size="29 5" default="{{{Map.TMObjective_SilverTime}}}" style="Manialink_Body" halign="center" valign="center" selecttext="1"/>
<entry id="CustomBronzeScore" pos="-20 -16" z-index="1" size="29 5" default="{{{Map.TMObjective_BronzeTime}}}" style="Manialink_Body" halign="center" valign="center" selecttext="1"/>
<label  pos="20 10" z-index="1" size="40 5" text="Player can GhostBlock." style="Manialink_Body" halign="center" valign="center" selecttext="1" textcolor="FFF" textsize="2" textfont="GameFont"/>
<label  pos="20 0" z-index="1" size="40 5" text="Player can FreeBlock." style="Manialink_Body" halign="center" valign="center" selecttext="1" textcolor="FFF" textsize="2" textfont="GameFont"/>
<quad pos="44 10" z-index="1" size="8 8" bgcolor="FFFA" style="UICommon64_1" substyle="CheckboxCircle_light" halign="center" valign="center" styleselected="1" id="Button_EditGhost" scriptevents="1"/>
<quad pos="44 0" z-index="1" size="8 8" bgcolor="FFFA" style="UICommon64_1" substyle="CheckboxCircle_light" halign="center" valign="center" styleselected="1" id="Button_EditFree" scriptevents="1"/>
<quad pos="15 -17" z-index="1" size="10 10" bgcolor="FFFA" style="Icons128x128_1" substyle="Load" halign="center" valign="center"/>
<quad pos="25 -17" z-index="1" size="10 10" bgcolor="FFFA" style="UICommon64_1" substyle="CheckboxCircle_light" halign="center" valign="center" styleselected="1" id="Button_EditLocker" scriptevents="1"/>
<quad pos="0 0" z-index="0" size="100 80" bgcolor="FFFA" style="UICommon128_1" substyle="BgDialog" halign="center" valign="center"/>
<label id="ExitButton" pos="25 -34" z-index="1" size="10 5" text="Exit" style="CardButtonMediumL" halign="center" valign="center" scriptevents="1"/>
<label id="ApplyButton" pos="-25 -34" z-index="1" size="10 5" text="Apply" style="CardButtonMediumL" halign="center" valign="center" scriptevents="1"/>

<label pos="0 32.5" z-index="2" size="100 10" text="Set Objectives" halign="center" valign="center2" textfont="GameFontExtraBold" textsize="5"/>
<quad pos="0 33" z-index="1" size="100 15" bgcolor="FFFA" style="UICommon128_1" substyle="BgDialogTitle" opacity="1" valign="center" halign="center"/>
<quad pos="0.222 0.666" z-index="0" size="500 500" bgcolor="FFFA" halign="center" valign="center" scriptevents="1" substyle="BgCardList" style="Bgs1" opacity="0.1"/>		
<script><!--
main () {
	declare ButtonClicked for Page = "";
	declare CMlQuad Button_EditLocker = (Page.GetFirstChild("Button_EditLocker") as CMlQuad);
	declare CMlQuad Button_EditGhost = (Page.GetFirstChild("Button_EditGhost") as CMlQuad);
	declare CMlQuad Button_EditFree = (Page.GetFirstChild("Button_EditFree") as CMlQuad);
	declare Boolean IsLocked = {{{IsLocked}}};
	declare Boolean MapUsesFreeBlocks = {{{MapUsesFreeBlocks}}};
	declare Boolean MapUsesGhostBlocks = {{{MapUsesGhostBlocks}}};
	while(True) {
		yield;
		//log(IsLocked);
		if (IsLocked) {
			Button_EditLocker.StyleSelected = True;
		}
		else {
			Button_EditLocker.StyleSelected = False;
		}
		if (MapUsesGhostBlocks) {
			Button_EditGhost.StyleSelected = True;
		}
		else {
			Button_EditGhost.StyleSelected = False;
		}
		if (MapUsesFreeBlocks) {
			Button_EditFree.StyleSelected = True;
		}
		else {
			Button_EditFree.StyleSelected = False;
		}
		foreach(Event in PendingEvents) {
			if(Event.Type == CGameManialinkScriptEvent::Type::MouseClick)	{	
				if (ButtonClicked == "") ButtonClicked = Event.ControlId;
				switch (Event.ControlId) {
					case "Button_EditLocker": {
						IsLocked = !IsLocked;
					}
					case "Button_EditGhost": {
						MapUsesGhostBlocks = !MapUsesGhostBlocks;
					}
					case "Button_EditFree": {
						MapUsesFreeBlocks = !MapUsesFreeBlocks;
					}
				}
			}
		}
	}
}
--></script>
</manialink>
""";
while(True) 	{
	declare ButtonClicked for ManialinkPage = "" ;
	ButtonClicked = "";
	wait(ButtonClicked != "");
	declare Page <=> ManialinkPage;
	wait(Page != Null);
	TempGoldScore = TL::ToInteger((Page.GetFirstChild("CustomGoldScore") as CMlEntry).Value);
	TempSilverScore = TL::ToInteger((Page.GetFirstChild("CustomSilverScore") as CMlEntry).Value);
	TempBronzeScore = TL::ToInteger((Page.GetFirstChild("CustomBronzeScore") as CMlEntry).Value);
	if (ButtonClicked == "ExitButton") break;
	switch (ButtonClicked) {
		case "Button_EditLocker": {
			IsLockedTemp = !IsLockedTemp;
		}
		case "Button_EditGhost": {
			MapUsesGhostBlocksTemp = !MapUsesGhostBlocksTemp;
		}
		case "Button_EditFree": {
			MapUsesFreeBlocksTemp = !MapUsesFreeBlocksTemp;
		}
	}
	if (ButtonClicked == "ApplyButton") {
		IsLocked = IsLockedTemp;
		MapUsesGhostBlocks = MapUsesGhostBlocksTemp;
		MapUsesFreeBlocks = MapUsesFreeBlocksTemp;
		Map.TMObjective_GoldTime = TempGoldScore;
		Map.TMObjective_SilverTime = TempSilverScore;
		Map.TMObjective_BronzeTime = TempBronzeScore;
		Map.ObjectiveTextAuthor = TL::TimeToText(Map.TMObjective_AuthorTime, True);
		Map.ObjectiveTextGold 	= TL::TimeToText(Map.TMObjective_GoldTime, True);
		Map.ObjectiveTextSilver = TL::TimeToText(Map.TMObjective_SilverTime, True);
		Map.ObjectiveTextBronze = TL::TimeToText(Map.TMObjective_BronzeTime, True);
		break;
	}
}
ManialinkText = "";
ShowOtherPlugins();
HideEditorInterface = False;
}

Text PuzzleCreationUI() {
	return """
	<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
	<manialink version="3">
	<frame id="PlaySoloPuzzleButton">
	<label pos="127 80" z-index="1" size="20 5" text="Play Puzzle" style="CardButtonMedium" scriptevents="1" halign="center" valign="center" id="Button_PlaySoloPuzzle"/>
	<label pos="123 68" z-index="0" size="60 10" text="Clicking this will force you out of the editor!" halign="center" valign="center" textemboss="1" textcolor="FF5C5CFF" textfont="GameFontSemiBold" autonewline="1"/>
	<label pos="104 80" z-index="5" size="10 10" text="" halign="center" valign="center" textsize="7" textcolor="fff" textemboss="1"/>
	<quad pos="103 80" z-index="4" size="15 15" bgcolor="FFF" opacity="1" halign="center" valign="center" substyle="UncheckCircle_light" style="UICommon64_1" modulatecolor="AAFFACFF"/>
	<quad pos="103 80" z-index="3" size="12 12" bgcolor="FFF" opacity="0.5" halign="center" valign="center" substyle="UncheckCircle_light" style="UICommon64_1" modulatecolor="AAFFACFF"/>
	<quad pos="103 80" z-index="2" size="10 10" bgcolor="FFF" opacity="0.2" halign="center" valign="center" substyle="UncheckCircle_light" style="UICommon64_1" modulatecolor="AAFFACFF"/>
	<!--<label pos="103 80" z-index="0" size="15 15" text="" halign="center" valign="center" textsize="8" textcolor="000" opacity="0.3"/>-->
	<quad pos="122 80" z-index="0" size="55 10" bgcolor="FFFA" valign="center" style="UICommon128_1" substyle="BgDialog" halign="center"/>
	</frame>
	<script><!--
	main () {
		while(True) {
			yield;
			foreach(Event in PendingEvents) {
				if(Event.Type == CGameManialinkScriptEvent::Type::MouseClick)	{	
					switch (Event.ControlId) {
						case "Button_PlaySoloPuzzle": {
							SendCustomEvent("PlaySoloPuzzle", [""]);
						}
						default: {}
					}
				}
			}
		}
	}
	--></script>
	</manialink>
	""";
}

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
    +++MapTypeStart+++
	declare persistent Integer RememberedTime for Map;
	declare Boolean IsPlaying for Map;
	declare metadata Text[] PuzzleBlockNames for Map;
	declare metadata Boolean IsLocked for Map = True;
	declare CBlockModel BlockModel;
	RememberedTime = Map.TMObjective_AuthorTime;
	//Check for unwanted & unintended stock blocks.
	foreach (BlockModel in BlockModels){
		if (BlockModel.InterfaceNumber != 0 && !PuzzleBlockNames.exists(BlockModel.Name)){
			BlockModel.InterfaceNumber = 0;
		}
	}
	ShowOtherPlugins();
	if (LocalUser.Login != Map.AuthorLogin && IsLocked && ValidationStatus == CMapType::ValidationStatus::Validated) {
		IsPlaying = True;
	}
	UpdateValidability();
    while(True) {
		yield;
        +++MapTypeLoop+++
		if (IsPlaying == False) {
			//EditLoop
			BlockStockMode = True;
			if (PlaceMode == CSmMapType::PlaceMode::FreeBlock) {
				PlaceMode = CSmMapType::PlaceMode::Block;
			}
			//Save the used blocks into an array, have a maximum of 8.
			foreach (BlockModel in BlockModels) {
				if (BlockModel.InterfaceNumber > 0) {
					if (!PuzzleBlockNames.exists(BlockModel.Name)) {
						PuzzleBlockNames.add(BlockModel.Name);
					}
				} else if (PuzzleBlockNames.exists(BlockModel.Name)) {
					PuzzleBlockNames.remove(BlockModel.Name);
				}
			}
			if (Map.TMObjective_AuthorTime != -1 && ValidationStatus == CMapType::ValidationStatus::Validable) {
				ValidationStatus = CMapType::ValidationStatus::Validated;
			}
			if (ValidationStatus == CMapType::ValidationStatus::Validated) {
				ManialinkText = PuzzleCreationUI();
			}
			else {
				ManialinkText = "";
			}
			// Manage events
			foreach(Event in PendingEvents) {
				switch(Event.Type) {
					case CMapEditorPluginEvent::Type::MapModified: {
						yield;

						if (Map.TMObjective_AuthorTime == -1) {
							RememberedTime = -1;
							Map.ObjectiveTextAuthor = "";
							Map.ObjectiveTextBronze = "";
							Map.ObjectiveTextGold = "";
							Map.ObjectiveTextSilver = "";
						}
						if (BlockStockMode == True) {
							UpdateValidability();
						}
						else {
							ValidationStatus = CMapType::ValidationStatus::Validable;
						}
					} 
					case CMapEditorPluginEvent::Type::StartValidation: {
						if (PuzzleBlockNames.count > 0) {
							//StartValidation(True);
							StartPuzzlePlay(True);
						}
						else {
							Dialog_Message("You must add at least one Block to the Puzzle Block List.");
						}
					} 
					case CMapEditorPluginEvent::Type::EditObjectives: {
						CustomObjectivesMenu();
						//DisplayDefaultSetObjectivesDialog();
					}
					case CMapEditorPluginEvent::Type::LayerCustomEvent: {
						switch (Event.CustomEventType) {
							case "PlaySoloPuzzle": {
								//SaveMap(Map.MapInfo.FileName);
								if (PuzzleBlockNames.count > 0) {
									StartPuzzlePlay(False);
								}
								else {
									Dialog_Message("You must add at least one Block to the Puzzle Block List.");
								}
							}
						}
					}
				}
			}
		}
		else {
			//Play the puzzle if the Author login doesn't match.
			StartPuzzlePlay(False);
		}
	}			
    +++MapTypeEnd+++
	BlockStockMode = False;
    UILayerDestroyAll();
}
